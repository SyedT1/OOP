2021-11-17 -- Scratchpad of CSE213 (Sec-2)
==========================================

Milestone-2: System Design:
	- Steps to built class diagram
	- 'Master' vs 'Transaction' class
	- Writing workflow for a sample goal (IRAS)
	- Drawing UML class-diagram (partial) using CRA-Report (IRAS)

File Handling in Java:

=============================================================================================

Milestone-2: System Design:
---------------------------
 - It includes many things, but we will restrict ourselves in producing following deliverables:
	- UML class diagram
	- File structure (representing database)
 - To produce the above, we need a compresensive CRA-report in place (Milestone-1)

------------------------------------------------------------------------------------------------

Steps to built class diagram:
-----------------------------

 - Understand the growth volume of the class-instances and normalize the high-volume growth classes
	- (We will try to understand this by our own terms "Master" and "Transaction" classes)
	- Avoid redundant fields to restrict volume

 - Analyzing CRA report:
    - Identify Model classes/interfaces representing application data:
      ----------------------------------------------------------------
  	- Identify USER classes
  	- Identify NON-USER classes
  	- Identify interfaces

	- Finalize decision about the user defined type
		- Decide whether the type will be a:
			 abstract-class / non-abstract class / interface

	- Finalize decision about the fields
		- Decide whether the field is static or non-static
		- Decide whether the field is final or not

	- Finalize decision about the methods
		- Decide whether the method is static or non-static
		- Decide whether the method is abstract or not
		- Decide whether the method is final or not
		- ## Does this method returns data back to the UI-scene or not?
			: this will guide to decide the return type of the method

    - Identify Controller classes representing UI-scene:
      --------------------------------------------------
	 - We will talk more on this when we start building FXML application (next class)
=================================================================================================

Master vs Transaction class:
============================

Master class: 
-------------
	- Class which has a unique field (value of the field is unique for each instances) 
	  to identify an instance. 
	- Also the growth of instance volume (database size) is under control / insignificant

Transaction class: 
------------------
	- Class which has NO unique field (value of the field is unique for each instances) 
	  to identify an instance. In this case, you may need to combile fields to identify instance
	- Also the growth of instance volume (database size) is quite high

Example: Dutch Bangla Bank Limited:
-----------------------------------

#: No of daily new Account (class) is opened for the bank:
	- No of branch: 214
	- No of Fast Track booth: 1268
	- No of ATM: 4930
	- No of Agent banking: 63
	- Assume, no of new accounts opened in a branch: 100
	- Assume, no of new accounts opened in DBBL Fast Track booth: 50
	- Assume, no of new accounts opened through DBBL Agent banking: 30

 - No of new accounts: 214*100 + 1268*50 + 63*30 = 67,430
 - In DBBL data center, 67,430 new records (Account class instances) are added to the database


#: No of daily bank-transactions occured in DBBL:
	- No of cash deposit in a branch: 500 				* 214 	= 107000
	- No of check deposit in a branch: 700 				* 214 	= 149800
	- Deposit cash using CDM in fast track: 100 			* 1268 	= 126800
	- Deposit check using CDM in fast track: 200			* 1268 	= 263600
	- Online fund transfer via internet banking: 50000		       	= 50000
	- Online fund transfer via rocket (mobile banking): 10000	       	= 10000

	- Withdrwal cash from each ATM: 300				* 4930 	= 1479000
	- Encashing check from each branch: 700				* 214  	= 149800
	- Wihdrwal as a result of online fund transfer:			       	= 50000
	---------------------------------------------------------------------------------
	Total bank-transactions of DBBL per day:				= 2341000

- Growth of volume: 67,430 vs 2341,000


public class Account{
	fields: accountNo, accountName, typeOfAccount, balance,
	address, email, contactNo, NID, .....
}
	- has unique field
	- volume growth is under control
	- It is a Master class

public class BankTransaction{
	fields: locationId, amount, typeOfTransaction, date, processedBy, 
	accountNo, accountName, contactNo
}
	- No unique field
	- volume growth is quite high
	- It is a Transaction class

- Since volume growth is quite high, we need to normalize the class by eliminating 
   redundant fields
- Also we can add an unique identifyer (new unique field) to the class as part of 
   normalization as follows

public class BankTransaction{
	fields: transactionId,
	accountNo, locationId, amount, typeOfTransaction, date, processedBy
}

=================================================================================================

- After detection of classes, we need to establish relationships among those classes:
	- inheritance
	- aggregation
	- composition
	- association and multiplicity (1:1, 1:M, M:1, M:M, *:1, *:M, M:*)

- Then draw the UML class diagram for the above using one of the online tools. We will
  use lucidchart

=================================================================================================

Writing workflow for a sample goal (IRAS):
==========================================

User: Student
  - Goal-1: Register courses for upcoming semester
    - Workflow:
	e1: check login credential (give detail....)
	e2: if login successful, load Student-specific homeScene, else go-back to login/forgotPW
	e3: after selecting "rigister course" option, it will check the following: document pending/
		date & time-slot/ probation-status. If verified positive, a new scene will appear and
		pre-loaded with ALL applicable offered-course (including prerequisites...) for the 
		student. Else, it will prompt to contact the registrar office.
		The pre loaded offered-course info contains:
			courseId, courseName, sec, time, days, rommNO, capacity, 
			NoOfcredits, facultyId
	e4: Student will select ONE-Course at a time and it will check:
		- capacityOverflow, time-clash-with-already-selected-courses
	e5: proceed to register, and it will check:
		- final Check of capacity overflow for all selected courses
		- no of credit taken is within the range [9 to 18]
		- for "Course/Lab" paired courses whether one is left out or not
		- ....
	e6: If above checking are positive, commit to database and generate reistration bill.
	    	Bill content: .......


Drawing UML class-diagram (partial) using CRA-Report (IRAS):
============================================================

public class Student:

public class Faculty:
	- facultyId, facultyName, desig, dept, salary, doj, dob,....

public class Course: [Master class]
	- courseId, courseTitle, noOfCredits, preRequisiteList, textBook, 

public class CourseTimeStamp{
	year, semester, day, time;
}


public class OfferedCourse: [Transaction class]
	- courseId, courseTitle, noOfCredits, sec, CourseTimeStamp timeStamp, facultyId, facultyName,
		location


public class OfferedCourse: [Normalizing Transaction class, eliminating redundant fields]
	- courseId, sec, CourseTimeStamp timeStamp, facultyId, location

public class RegistrationBill:
	- billNo, totalAmount
	- public void generateBillPdf(){
		use "1234567-registeredcourse.bin" file rom database
	}


----------------------
RegisterCourseScene.fxml
class RegisterCourseSceneController .....{
	@FXML private
	ArrayList<CourseTimeStamp> selectedCourseTimeStamp;
	ArrayList<Integer> selectedCourseIDs;
	proceedToRegisterCourseButtonOnClick(...){
		//commit to database
		write to file: "1234567-registeredcourse.bin"
		int <student id>
		int<1th-coutseId>, selectedCourseTimeStamp-instance
		int<2th-coutseId>, selectedCourseTimeStamp-instance
		int<3th-coutseId>, selectedCourseTimeStamp-instance
		int<4th-coutseId>, selectedCourseTimeStamp-instance
		.....
		int<nth-coutseId>, selectedCourseTimeStamp-instance
		//arraylist end here
		//end of file writing
	}

}













	







































