2021-12-06 -- Scratchpad of CSE213 (Sec-2)
==========================================

public class FXMLMainSceneController implements Initializable {

    @FXML
    private void goToStage2ButtonOnClick(ActionEvent event) throws IOException{
        Parent fileChooserViewParent 
		= FXMLLoader.load(getClass().getResource("FileChooserView.fxml"));
        Scene fileChooserViewScene = new Scene(fileChooserViewParent);
        Stage newWindow  = new Stage();
        
        newWindow.setTitle("File Chooser Test Stage");
        newWindow.setScene(fileChooserViewScene);
        newWindow.show();
    }

    @FXML
    private void goToScene2ButtonOnClick(ActionEvent e) throws IOException{
        Parent scene2Parent 
		= FXMLLoader.load(getClass().getResource("Scene2.fxml"));
        Scene scene2 = new Scene(scene2Parent);
      
	Stage cloneHandleOfStg 
		= (Stage)((Node)e.getSource().getScene().getWindow());
	
        cloneHandleOfStg.setScene(scene2);
        cloneHandleOfStg.show();
    }

}

======================================================================

No of equations: 3 [time needed to solve on paper, approximately 5 minutes]

2x + 3y - 4z = 123
x +7y + 2z = 12
-3x + 4y + 5z = 56

After solution:
 x = ..
 y = ..
 z = ...

Methods to use: Gause-Seidel method
Methods to use: Gause-Elimation method
Methods to use: L-U decomposition method

2 	3 	-4 	123
1 	7 	2 	12
-3 	4 	5 	56

----------------------------------

No of equations: 10 [time needed to solve on paper, approximately 45 minutes]
No of equations: 50 [time needed to solve on paper, approximately 5 days]
No of equations: 50 [time needed to solve on COMPUTER, approximately 3 seconds]
No of equations: 10000 [time needed to solve on COMPUTER, approximately 1 minutes]

No of equations: 10 million 
[time needed to solve on COMPUTER, approximately several days, IF SINGLE THREADED PROGRAM]
[time needed to solve on COMPUTER, approximately several minutes, IF PARALLEL Program]

==================================================================================
    @FXML
    public void goToScene2ButtonOnClick(ActionEvent e){
      try{
        Parent scene2Parent = FXMLLoader.load(getClass().getResource("Scene2.fxml"));       
        Scene newScene = new Scene(scene2Parent);
        
	Stage stage2 = new Stage();

        stage2.setTitle("Main Stage");
        stage2.setScene(newScene);
        stage2.show();
        }
	catch(Exception e){}
    }

=============================================================================

public class A{
	private int x;
	public getX(){ return x;}
}

public class B{
	private int y;
	public void printSome(){
		//prints private field x of class A
		sout(classAHandle.getX());
	}
}
--------------------------------------------------------------------
public class A{
	private int x;
	public void doSome(){
		B obj = new B();
		obj.printSome(x);
	}
}

public class B{
	private int y;
	public void printSome(int val){
		//prints private field x of class A
		sout(val);
	}
}


=============================================================================

class Scene1Controller implements ......{			//class A

	@FXML private TextField memoTextField;			

	... goToScene2ButtonOnClick(...){			//doSome
		Scene2Controller obj = new Scene2Controller();
		obj.setVal(memoTextField.getText());

		Parent p = FXMLLoader.load(getClass().getResource("Scene2.fxml"));
		Scene s2 = new Scene(p);
		Stage st = (Stage)((Node)e.getSource().getScene().getWindow());
		st.setScene(s2);
		st.show();
	}
}

class Scene1Controller implements ......{			//class A

	@FXML private TextField memoTextField;			

	... goToScene2ButtonOnClick(...){			//doSome
		FXMLLoader loader = new FXMLLoader();

		//Parent p = FXMLLoader.load(getClass().getResource("Scene2.fxml"));
		loader.setLocation(getClass().getResource("Scene2.fxml"));
		Parent p = loader.load();

		Scene2Controller obj = loader.getController();
		obj.setVal(memoTextField.getText());

		Scene s2 = new Scene(p);
		Stage st = (Stage)((Node)e.getSource().getScene().getWindow());
		st.setScene(s2);
		st.show();

	}
}

class Scene2Controller implements ......{			//class B

	@FXML private Label outputLabel;
	private String outputStr;
	public void setVal(String str){ outputStr = str;}

	@Override 
	.... void initialize(){					//printSome
	   outputLabel.setText(outputStr);		
	}
	
	... goToScene2ButtonOnClick(...){
		//this method can also use the passed data from outputStr
	}

}

----------------------------------------------

- FXMLLoader class has a method called getController(), which return the specific controller
	instance representing the rendered view of that scene
- But the getController method of FXMLLoader is a non-static method. Therefore, to call the
	getController we need a FXMLLoader instance as client

- Now, please note that, there are twk overloaded "load" method available in FXMLLoader class
	- one is static, the URL of the fxml file will be parameter of the load method
	- another is non-static, this load method will use the URL from a field of the client
		(FXMLLOader instance), therefore this version of load will have no parameter




































